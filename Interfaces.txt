Интерфейсы - классы, у которых все методы публичные и не имеют реализации. Код методов должны реализовывать потомки.

Интерфейсы объявляют как обычные классы, но вместо слова class исп.слово interface.

Для наследования от интерфейсов исп.другая терминология: правильно говорить что класс реализует интерфейс, а не наследует.
Соответственно вместо слова extends исп. implements.

- Объект интерфейса создать нельзя;
- Все методы интерфейса не должны иметь реализации;
- Все методы должны быть public;
- Интерфейсы могут содержать только методы, но не могут содержать свойства;
- Имена интерфейса и класса не должны совпадать;
- Интерфейсы могут содержать константы, но они не могут быть переопределены наследующим классом или интерфейсом.

---Параметры в методах интерфейсов---
При описании методов в интерфейсе необходимо указывать не только имена самих методов, но и принимаемые параметры.

---Конструктор интерфейсов---
В интерфейсе также можно объявлять конструктор, указав количество параметров.

interface iRectangle
	{
		public function __construct($a, $b); // конструктор с двумя параметрами
		public function getSquare(); // нахождение площади
		public function getPerimeter(); // нахождение периметра
	}

	class Rectangle implements iRectangle
    	{
    		private $a;
    		private $b;

    		public function __construct($a, $b)
    		{
    			$this->a = $a;
    			$this->b = $b;
    		}

    		public function getSquare()
    		{
    			return $this->a * $this->b;
    		}

    		public function getPerimeter()
    		{
    			return 2 * ($this->a + $this->b);
    		}
    	}
---Наследование интерфейсов---
Интерфейсы могут наследовать друг друга с помощью оператора extends. Аналогично классам.

interface Figure
	{
		public function getSquare();
		public function getPerimeter();
	}

interface iRectangle extends Figure
	{
		public function __construct($a, $b);
	}

---instanceof---
Для проверки реализует ли какой-то класс заданный интерфейс можно использовать оператор instanceof.

var_dump($quadrate instanceof Quadrate); // выведет true
	var_dump($quadrate instanceof Figure); // выведет true

В PHP нет множественного наследования и каждый класс может иметь только одного родителя. С интерфейсами по-другому: каждый класс может реализовывать любое количество интерфейсов, которые указываются через запятую после слова implements.

Вот еще отличие от Абстрактных классов: наследовать несколько абстрактных классов нельзя, но можно реализовать несколько интерфейсов. 



