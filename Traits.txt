Так как в PHP нельзя наследовать от нескольких классов - в качестве решения этой проблемы применяют трейты.

Трейт представляет собой набор свойств и методов, которые можно включить в другой класс. При этом свойства и методы будут восприниматься классом будто свои.

Синтаксис такой же как у классов, только вместо слова class используется trait.

Экзмепляр трейта нельзя создать, они предназначены только для подключения к другим классам.
Само подключение осуществляется с помощью слова use и через пробел имя подключаемого трейта.
В классе могут использоваться несколько трейтов.

---Разрешение конфликтов в трейтах---
Так как один класс может наследовать несколько трейтов - то может возникнуть проблема что трейты будут иметь одноименные методы. В этом случае PHP выдает фатальную ошибку.

Разрешить конфликт можно следующим образом: с помощью оператора insteadof:

Trait::method insteadof Trait2;

Можно использовать и метод второго трейта, переименовав его через ключевое слово as:

Trait2::method as method2;

Использовать ключ.слово as без определения главного метода через insteadof нельзя - выдаст ошибку.

Использование трейтов - это не наследование. При наследовании приватные методы и свойства не наследуются.

В трейтах  наоборот: в использующем трейт классе будут доступны и публичные и приватные методы и свойства класса. Внутри трейта можно использовать любой модификатор доступа. При необходимости можно поменять этот модификатор на другой. После ключевого слова as в теле use - указывается новый модификатор.

trait TestTrait
	{
		// Приватный метод:
		private function method()
		{
			return '!!!';
		}
	}

	class Test
	{
		use TestTrait {
			TestTrait::method as public; // меняем метод на публичный
		}
	}


---Приоритет методов---
Если в классе и в трейте есть одноименный метод, то метод класса переопределит метод трейта.
Если же сам класс не имеет такого метода, но имеется конфликт имен методов трейта и методов родительского класса, то методы трейта имеют приоритет.


---Абстрактные методы трейтов---

В трейтах можно некоторые методы объявлять абстрактными. В этом случае класс, использующий этот трейт, обязан будет реализовать такой метод.

trait TestTrait
	{
		public function method1()
		{
			return 1;
		}

		// Абстрактный метод:
		abstract public function method2();
	}

	Наличие в трейте абстрактного метода обяжет программиста реализовать его в классе Test, иначе будет ошибка PHP.

---Использование трейтов в трейтах---

Трейты, подобно классам, также могут использовать другие трейты.

trait Trait1
	{
		private function method1()
		{
			return 1;
		}

		private function method2()
		{
			return 2;
		}
	}

	trait Trait2
	{
		use Trait1; // используем первый трейт

		private function method3()
		{
			return 3;
		}
	}












